// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int capacity;
    field int length;
    field boolean reset;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        }
        let capacity = maxLength;
        let length = 0;
        let reset = true;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (capacity > 0) {
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var String tmp;
        var int i;
        if (length = capacity) {
            let tmp = String.new(capacity + capacity);
            let i = 0;
            while (i < length) {
                do tmp.appendChar(chars[i]);
                let i = i + 1;
            }
            do tmp.appendChar(c);
            do dispose();
        } else {
            let chars[length] = c;
            let length = length + 1;
            let tmp = this;
        }
        return tmp;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, t, sign;
        let i = 0;
        let t = 0;
        let sign = 1;
        if (chars[i] = 45) {
            let sign = -1;
            let i = i + 1;
        }
        while (i < length & (47 < chars[i]) & (chars[i] < 58)) {
            let t = t * 10 + chars[i] - 48;
            let i = i + 1;
        }
        return sign * t;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int q, r;
        if (reset) {
            let length = 0;
            let reset = false;
        }
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        if (val < 10) {
            do appendChar(val + 48);
            let reset = true;
            return;
        }
        let q = val / 10;
        let r = val - (q * 10);
        do setInt(q);
        do appendChar(r + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
