// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static int tmp;

    // Initializes the Math library.
    function void init() {
        let n = 16;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 32767 + 1;
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        while (i < n) {
            if (~(y & powersOfTwo[i] = 0)) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        // Figure 12.1 on page 334
        // let x = q * 2y + r, 0 <= r < y
        // then ⌊x/y⌋ = 2q + [r >= y]
        var int sign, yy, q;
        let sign = 1;
        if (x < 0) {
            let sign = -1;
            let x = -x;
        }
        if (y < 0) {
            let sign = -sign;
            let y = -y;
        }
        if (y > x) {
            let tmp = 0;
            return 0;
        }

        let yy = y + y;
        if (yy < 0) {
            let tmp = 0;
            return sign;
        }

        // let x' = x
        // let y' = 2y
        // if q = 2q', then 2qy = 2q'y'
        // if q = 2q' + 1, then 2qy = 2q'y' + y'
        let q = Math.divide(x, yy);
        if (x - tmp < y) {
            let q = q + q;
        } else {
            let tmp = tmp + y;
            let q = q + q + 1;
        }
        if (sign < 0) {
            return -q;
        }
        return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // Figure 12.3 on page 335
        // check if the j-th bit of y is 1
        // y is at most n/2 bits, i.e. y < 2^(n/2), otherwise y^2 >= 2^n, conflicting to y^2 <= x < 2^n
        var int y, j, t, t2;
        let y = 0;
        let j = n / 2 - 1;
        while (~(j < 0)) {
            let t = y + powersOfTwo[j];
            let t2 = t * t;
            if (~(t2 > x) & t2 > 0) {
                let y = t;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
}
