// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean currentColor;
    static int screenStart;

    /** Initializes the Screen. */
    function void init() {
        let currentColor = true;
        let screenStart = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int r, c;
        let r = 0;
        while (r < 256) {
            let c = 0;
            while (c < 32) {
                do Memory.poke(r * 32 + c + screenStart, 0);
                let c = c + 1;
            }
            let r = r + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pos, word, bit, mask;
        let pos = y * 32 + (x / 16) + screenStart;
        let word = Memory.peek(pos);
        let bit = x - (x / 16 * 16);
        let mask = 1;
        while (bit > 0) {
            let mask = mask + mask;
            let bit = bit - 1;
        }
        if (currentColor) {
            do Memory.poke(pos, mask | word);
        } else {
            do Memory.poke(pos, ~mask & word);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int t, a, b, dx, dy, diff;
        if (x1 = x2) {
            if (y1 > y2) {
                let t = y1;
                let y1 = y2;
                let y2 = t;
            }
            while (~(y1 > y2)) {
                do Screen.drawPixel(x1, y1);
                let y1 = y1 + 1;
            }
            return;
        }
        if (y1 = y2) {
            if (x1 > x2) {
                let t = x1;
                let x1 = x2;
                let x2 = t;
            }
            while (~(x1 > x2)) {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 + 1;
            }
            return;
        }
        // Figure 12.7 on page 342
        if (x1 > x2) {
            let t = x1;
            let x1 = x2;
            let x2 = t;
            let t = y1;
            let y1 = y2;
            let y2 = t;
        }
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dy < 0) {
            let dy = -dy;
            let t = -1;
        } else {
            let t = 1;
        }
        let diff = 0;
        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + a, t * b + y1);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int t;
        if (y1 > y2) {
            let t = y1;
            let y1 = y2;
            let y2 = t;
        }
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, t;
        if (r > 181) {
            let r = 181;
        }
        let dy = -r;
        while (~(dy > r)) {
            let t = Math.sqrt(r * r - (dy * dy));
            do Screen.drawLine(x - t, y + dy, x + t, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
